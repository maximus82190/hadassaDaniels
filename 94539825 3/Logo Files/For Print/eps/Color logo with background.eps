%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2374 338
%%HiResBoundingBox: 0 0 2373.1199 337.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2373.1199 337.91998 re
W
q
[0.24 0 0 -0.24 0 337.91998] cm
q
0 0 9887.5 1406.25 re
W*
q
[3.12515 0 0 3.123663 0.0337934 0] cm
0 0 3163.8269 450.19263 re
f
Q
q
[17.179903 0 0 17.17173 197.61398 55.647766] cm
q
24 12 m
24.360001 12 24.6 12.24 24.6 12.6 c
24.6 39.400002 l
24.6 39.760002 24.360001 40 24 40 c
22.08 40 l
21.719999 40 21.48 39.759998 21.48 39.400002 c
21.48 27.120003 l
6.52 27.120003 l
6.52 39.400002 l
6.52 39.760002 6.28 40 5.92 40 c
4 40 l
3.639999 40 3.4 39.759998 3.4 39.400002 c
3.4 12.600002 l
3.4 12.240003 3.64 12.000002 4 12.000002 c
5.92 12.000002 l
6.28 12.000002 6.52 12.240002 6.52 12.600002 c
6.52 24.240002 l
21.48 24.240002 l
21.48 12.600001 l
21.48 12.240002 21.719999 12.000001 22.08 12.000001 c
24 12.000001 l
24 12 l
h
63.083 39.32 m
63.243 39.720001 63.042999 40 62.603001 40 c
60.682999 40 l
60.362999 40 60.142998 39.880001 60.002998 39.52 c
57.862999 33.799999 l
44.382999 33.799999 l
42.243 39.52 l
42.103001 39.880001 41.882999 40 41.563 40 c
39.642998 40 l
39.202999 40 39.002998 39.720001 39.162998 39.32 c
49.403 12.48 l
49.522999 12.16 49.803001 12 50.123001 12 c
52.123001 12 l
52.443001 12 52.723 12.16 52.843002 12.48 c
63.083 39.32 l
h
45.423 31 m
56.822998 31 l
51.122997 15.8 l
45.423 31 l
h
84.526001 12 m
94.246002 12 99.166 18.08 99.166 26 c
99.166 33.919998 94.246002 40 84.526001 40 c
78.246002 40 l
77.886002 40 77.646004 39.759998 77.646004 39.400002 c
77.646004 12.600002 l
77.646004 12.240003 77.886002 12.000002 78.246002 12.000002 c
84.526001 12.000002 l
84.526001 12 l
h
84.526001 37.119999 m
92.206001 37.119999 96.005997 32.879997 96.005997 26 c
96.005997 19.120003 92.205994 14.88 84.526001 14.88 c
80.765999 14.88 l
80.765999 37.119999 l
84.526001 37.119999 l
h
136.149002 39.32 m
136.309006 39.720001 136.109009 40 135.669006 40 c
133.749008 40 l
133.429001 40 133.209015 39.880001 133.069016 39.52 c
130.929016 33.799999 l
117.44902 33.799999 l
115.309021 39.52 l
115.169022 39.880001 114.94902 40 114.629021 40 c
112.709023 40 l
112.26902 40 112.069023 39.720001 112.229019 39.32 c
122.469017 12.48 l
122.58902 12.16 122.869019 12 123.189018 12 c
125.189018 12 l
125.509018 12 125.789017 12.16 125.909019 12.48 c
136.149002 39.32 l
h
118.488998 31 m
129.888992 31 l
124.188995 15.8 l
118.488998 31 l
h
159.472 24.24 m
164.951996 25.4 169.812 26.959999 169.812 32.84 c
169.812 37.360001 166.671997 40.599998 159.591995 40.599998 c
153.631989 40.599998 149.911987 38.359997 149.511993 34 c
149.472 33.599998 149.71199 33.259998 150.071991 33.259998 c
151.971985 33.259998 l
152.331985 33.259998 152.531982 33.559998 152.571991 33.879997 c
152.871994 36.239998 155.431992 37.759998 159.591995 37.759998 c
164.192001 37.759998 166.731995 36.16 166.731995 32.839996 c
166.731995 28.919996 163.832001 28.199997 159.472 27.159996 c
154.371994 25.939997 150.192001 24.279995 150.192001 18.919996 c
150.192001 14.539996 153.231995 11.659996 159.311996 11.659996 c
164.991989 11.659996 168.51199 13.839996 168.952 18.159996 c
168.99199 18.559996 168.752 18.739996 168.392 18.739996 c
166.632004 18.739996 l
166.272003 18.739996 166.072006 18.599997 166.031998 18.279997 c
165.751999 16.039997 163.311996 14.459997 159.311996 14.459997 c
155.632004 14.459997 153.192001 15.939997 153.192001 18.919998 c
153.192001 21.979998 155.451996 23.379997 159.472 24.239998 c
159.472 24.24 l
h
193.77499 24.24 m
199.25499 25.4 204.11499 26.959999 204.11499 32.84 c
204.11499 37.360001 200.97499 40.599998 193.89499 40.599998 c
187.93498 40.599998 184.215 38.359997 183.81499 34 c
183.77499 33.599998 184.01498 33.259998 184.37498 33.259998 c
186.27498 33.259998 l
186.63498 33.259998 186.83498 33.559998 186.87498 33.879997 c
187.17499 36.239998 189.73499 37.759998 193.89499 37.759998 c
198.495 37.759998 201.03499 36.16 201.03499 32.839996 c
201.03499 28.919996 198.13499 28.199997 193.77499 27.159996 c
188.67499 25.939997 184.495 24.279995 184.495 18.919996 c
184.495 14.539996 187.53499 11.659996 193.61499 11.659996 c
199.29498 11.659996 202.81499 13.839996 203.25499 18.159996 c
203.29498 18.559996 203.05499 18.739996 202.69499 18.739996 c
200.935 18.739996 l
200.575 18.739996 200.375 18.599997 200.33499 18.279997 c
200.05499 16.039997 197.61499 14.459997 193.61499 14.459997 c
189.935 14.459997 187.495 15.939997 187.495 18.919998 c
187.495 21.979998 189.75499 23.379997 193.77499 24.239998 c
193.77499 24.24 l
h
241.39799 39.32 m
241.558 39.720001 241.358 40 240.918 40 c
238.998 40 l
238.67799 40 238.45801 39.880001 238.31801 39.52 c
236.17801 33.799999 l
222.69801 33.799999 l
220.55801 39.52 l
220.41801 39.880001 220.19801 40 219.87802 40 c
217.95802 40 l
217.51802 40 217.31802 39.720001 217.47803 39.32 c
227.71803 12.48 l
227.83803 12.16 228.11803 12 228.43803 12 c
230.43803 12 l
230.75804 12 231.03804 12.16 231.15804 12.48 c
241.39799 39.32 l
h
223.73801 31 m
235.138 31 l
229.438 15.8 l
223.73801 31 l
h
W
[238.052734 0 0 28.940005 3.400001 11.659995] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1.000442 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0 1.000442 0 axialSH
Q
Q
q
[9.583228 0 0 9.578669 4528.6504 226.37347] cm
q
58.312 71.264 m
58.791 73.294998 l
63.806999 87.388 57.357002 93.000999 57.357002 93.000999 c
46.965004 96.464996 l
43.144005 85.715996 l
51.742004 82.132996 l
53.654003 92.164993 l
56.873005 90.608994 58.258003 87.245995 58.451004 83.848991 c
58.547005 82.148994 58.345005 80.430992 57.943005 78.779991 c
57.782005 78.11599 55.928005 73.647995 56.162006 73.414993 c
55.088005 74.488991 l
47.682007 76.280991 39.562004 70.549988 39.562004 70.549988 c
30.810005 62.095985 36.103004 49.655991 42.917004 41.922989 c
43.276005 41.514988 47.899002 37.06599 47.682003 36.62999 c
47.563004 36.390991 47.563004 36.271988 47.563004 36.271988 c
46.455002 30.729988 46.165005 24.996988 46.837002 19.379988 c
47.453003 14.232988 48.434002 7.567987 52.872002 4.172988 c
55.920002 1.840988 58.496002 3.519988 59.959 6.562988 c
60.311001 7.294988 60.716999 8.135988 60.938999 8.920988 c
64.520996 21.580988 57.236 29.104988 57.236 29.104988 c
50.307999 37.465988 l
54.369999 54.544991 l
61.415001 52.27499 l
65 64.457001 l
58.312 71.264 l
h
55 5.118 m
54.577999 5.236 54.120998 5.447 53.626999 5.764 c
51.542 7.105 49.98 10.103001 49.165001 12.366 c
47.759003 16.267 47.631001 20.463001 48.013 24.553001 c
48.223999 26.819002 48.397999 29.262001 48.876999 31.493002 c
49.594997 34.359001 l
49.594997 34.359001 51.742996 31.970001 51.743996 31.970001 c
56.188995 27.34 59.749996 21.465 59.739994 14.867001 c
59.735001 12.417 59.471001 3.871 55 5.118 c
h
54.370998 72.459 m
55.563999 71.385002 l
54.370998 67.203003 53.174999 61.830002 51.981998 56.694 c
47.203999 58.247002 l
50.071999 68.398003 l
47.563 68.278999 l
45.174 57.650002 l
51.625 55.501003 l
48.279999 39.973 l
42.598999 46.972 36.563999 56.178001 40.593998 65.445 c
42.571999 69.991997 46.556999 71.790001 51.231998 72.415001 c
51.838001 72.496002 53.808998 72.966003 54.370998 72.459 c
h
54.729 55.856998 m
57.834 69.352997 l
63.806999 64.216995 l
61.058998 53.826996 l
54.729 55.856998 l
h
W
[30.019242 0 0 93.385595 34.980768 3.07939] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.138936 def
/yMin -0.013261 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
-0.138936 1 0 axialSH
Q
Q
q
[17.179903 0 0 17.17173 5166.0566 55.647766] cm
q
35.483002 12 m
45.203003 12 50.123001 18.08 50.123001 26 c
50.123001 33.919998 45.203003 40 35.483002 40 c
29.203001 40 l
28.843 40 28.603001 39.759998 28.603001 39.400002 c
28.603001 12.600002 l
28.603001 12.240003 28.843 12.000002 29.203001 12.000002 c
35.483002 12.000002 l
35.483002 12 l
h
35.483002 37.119999 m
43.163002 37.119999 46.963001 32.879997 46.963001 26 c
46.963001 19.120003 43.163002 14.88 35.483002 14.88 c
31.723001 14.88 l
31.723001 37.119999 l
35.483002 37.119999 l
h
87.106003 39.32 m
87.266006 39.720001 87.066002 40 86.625999 40 c
84.706001 40 l
84.386002 40 84.166 39.880001 84.026001 39.52 c
81.886002 33.799999 l
68.406006 33.799999 l
66.266006 39.52 l
66.126007 39.880001 65.906006 40 65.586006 40 c
63.666008 40 l
63.226009 40 63.026009 39.720001 63.186008 39.32 c
73.42601 12.48 l
73.546013 12.16 73.826012 12 74.146011 12 c
76.146011 12 l
76.466011 12 76.74601 12.16 76.866013 12.48 c
87.106003 39.32 l
h
69.445999 31 m
80.846001 31 l
75.146004 15.8 l
69.445999 31 l
h
121.709 12 m
122.069 12 122.308998 12.24 122.308998 12.6 c
122.308998 39.400002 l
122.308998 39.720001 122.128998 39.940002 121.828995 40 c
119.148994 40 l
118.828995 40 118.588997 39.880001 118.428993 39.599998 c
104.788994 16.479998 l
104.788994 39.399998 l
104.788994 39.759998 104.548996 39.999996 104.188995 39.999996 c
102.268997 39.999996 l
101.908997 39.999996 101.668999 39.759995 101.668999 39.399998 c
101.668999 12.599999 l
101.668999 12.279999 101.848999 12.059999 102.149002 11.999998 c
104.829002 11.999998 l
105.149002 11.999998 105.389 12.119998 105.549004 12.399998 c
119.189003 35.519997 l
119.189003 12.599997 l
119.189003 12.239997 119.429001 11.999996 119.789001 11.999996 c
121.709 11.999996 l
121.709 12 l
h
157.412003 14.88 m
149.671997 14.88 l
149.671997 37.119999 l
157.412003 37.119999 l
157.772003 37.119999 158.012009 37.360001 158.012009 37.719997 c
158.012009 39.399998 l
158.012009 39.759998 157.772003 39.999996 157.412003 39.999996 c
138.811996 39.999996 l
138.451996 39.999996 138.21199 39.759995 138.21199 39.399998 c
138.21199 37.719997 l
138.21199 37.359997 138.451996 37.119999 138.811996 37.119999 c
146.552002 37.119999 l
146.552002 14.879999 l
138.811996 14.879999 l
138.451996 14.879999 138.21199 14.639999 138.21199 14.279999 c
138.21199 12.599999 l
138.21199 12.239999 138.451996 11.999998 138.811996 11.999998 c
157.412003 11.999998 l
157.772003 11.999998 158.012009 12.239998 158.012009 12.599999 c
158.012009 14.279999 l
158.012009 14.639998 157.772003 14.879999 157.412003 14.879999 c
157.412003 14.88 l
h
191.515 37.119999 m
191.875 37.119999 192.11501 37.360001 192.11501 37.719997 c
192.11501 39.399998 l
192.11501 39.759998 191.875 39.999996 191.515 39.999996 c
174.515 39.999996 l
174.155 39.999996 173.91499 39.759995 173.91499 39.399998 c
173.91499 12.599999 l
173.91499 12.239999 174.155 11.999998 174.515 11.999998 c
191.47501 11.999998 l
191.83501 11.999998 192.07501 12.239998 192.07501 12.599999 c
192.07501 14.279999 l
192.07501 14.639998 191.83501 14.879999 191.47501 14.879999 c
177.035 14.879999 l
177.035 23.84 l
190.395 23.84 l
190.755 23.84 190.99501 24.08 190.99501 24.440001 c
190.99501 26.120001 l
190.99501 26.480001 190.755 26.720001 190.395 26.720001 c
177.035 26.720001 l
177.035 37.120003 l
191.515 37.120003 l
191.515 37.119999 l
h
225.218 37.119999 m
225.578 37.119999 225.81801 37.360001 225.81801 37.719997 c
225.81801 39.399998 l
225.81801 39.759998 225.578 39.999996 225.218 39.999996 c
208.418 39.999996 l
208.058 39.999996 207.81799 39.759995 207.81799 39.399998 c
207.81799 12.599999 l
207.81799 12.239999 208.058 11.999998 208.418 11.999998 c
210.338 11.999998 l
210.698 11.999998 210.938 12.239998 210.938 12.599999 c
210.938 37.119999 l
225.218 37.119999 l
h
249.58099 24.24 m
255.06099 25.4 259.92099 26.959999 259.92099 32.84 c
259.92099 37.360001 256.78098 40.599998 249.70099 40.599998 c
243.74098 40.599998 240.021 38.359997 239.62099 34 c
239.58099 33.599998 239.82098 33.259998 240.18098 33.259998 c
242.08098 33.259998 l
242.44098 33.259998 242.64098 33.559998 242.68098 33.879997 c
242.98099 36.239998 245.54099 37.759998 249.70099 37.759998 c
254.30099 37.759998 256.841 36.16 256.841 32.839996 c
256.841 28.919996 253.94101 28.199997 249.58101 27.159996 c
244.481 25.939997 240.30101 24.279995 240.30101 18.919996 c
240.30101 14.539996 243.341 11.659996 249.42101 11.659996 c
255.101 11.659996 258.621 13.839996 259.061 18.159996 c
259.10101 18.559996 258.86099 18.739996 258.50101 18.739996 c
256.741 18.739996 l
256.38101 18.739996 256.181 18.599997 256.14099 18.279997 c
255.86099 16.039997 253.42099 14.459997 249.42099 14.459997 c
245.741 14.459997 243.30099 15.939997 243.30099 18.919998 c
243.30099 21.979998 245.56099 23.379997 249.58099 24.239998 c
249.58099 24.24 l
h
W
[231.317999 0 0 28.940005 28.602988 11.659995] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
